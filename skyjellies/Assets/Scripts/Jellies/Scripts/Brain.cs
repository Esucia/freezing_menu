using Jellies.Behaviors;
using UnityEngine;

namespace Jellies
{
    /// <summary>
    /// Add this script to the jelly prefab to provide for centralized control of jelly behavior.
    /// </summary>
    /// <remarks>
    /// Depends on the jelly <c>Sensing</c> component as well as specific jelly behaviors that we want the jelly to
    /// exhibit, such as Wandering and Watching.  
    /// \todo Currently uses state pattern, but we should replace with a richer AI such as behavior tree / GOAP.
    /// </remarks>
    [RequireComponent(typeof(Sensing))]
    [RequireComponent(typeof(Watching))]
    [RequireComponent(typeof(Wandering))]
    public class Brain : MonoBehaviour
    {
        [SerializeField, Tooltip("Use to set the initial state of the jelly (default is Wandering).")]
        private State _currentState;

        private void Awake()
        {
            if (TryGetComponent(out Sensing senses))
            {
                senses.Sensed += OnSensed;
            }

            foreach (State state in GetComponents<State>())
            {
                state.enabled = false;
            }
        }

        private void Start()
        {
            if (_currentState == null)
            {
                if (!TryGetComponent(out Wandering wanderer)) { return; }
                _currentState = wanderer;
            }
            _currentState.Enter(gameObject);
        }

        /// <summary>
        /// Handles a sensory event such as those generated by the <c>Sensing</c> component.  
        /// </summary>
        /// <param name="eventArgs">data from the Jelly's senses</param>
        private void OnSensed(Sensing.EventArgs eventArgs)
        {
            if (eventArgs.stimulus != Sensing.Sensor.Other) { return; }

            State nextState = eventArgs.status ? GetComponent<Watching>() : GetComponent<Wandering>();
            if (nextState == null) { return; }

            _currentState.Exit();
            _currentState = nextState;
            _currentState.Enter(eventArgs.source);
        }
    }
}
